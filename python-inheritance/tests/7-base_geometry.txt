=============================
How to Use 7-base_geometry.py
=============================

>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> bg = BaseGeometry()
>>> type(bg)
<class '7-base_geometry.BaseGeometry'>

In fact, any arguments supplied to an instantiation of ``BaseGeometry`` results in a TypeError.

>>> bg = BaseGeometry(None)
Traceback (most recent call last):
TypeError: object() takes no parameters

``integer_validator(...)``, validates the integer value
of a paramter. The first parameter, ``name``, is the name of the argument to
check. The second argument, ``value``, is the argument to check.

If ``value`` is a valid integer, the function does nothing.

>>> bg.integer_validator("valid number", 1)

But, if ``value`` is not an integer, a ``TypeError`` is raised.


>>> bg.integer_validator("invalid number", "number")
raceback (most recent call last):
TypeError: invalid number must be an integer


>>> bg.integer_validator("another invalid", True)
Traceback (most recent call last):
TypeError: another invalid must be an integer

>>> bg.integer_validator("invalid tuple", (1,))
Traceback (most recent call last):
TypeError: invalid tuple must be an integer

>>> bg.integer_validator("and another", [3])
Traceback (most recent call last):
TypeError: and another must be an integer

>>> bg.integer_validator("more invalid testing", {3, 4})
Traceback (most recent call last):
TypeError: more invalid testing must be an integer

>>> bg.integer_validator("absolutely every possible invalid", None)
Traceback (most recent call last):
TypeError: absolutely every possible invalid must be an integer

And if ``value`` is an integer, but less than or equal to zero, a ValueError
is raised.

>>> bg.integer_validator("invalid int", -1)
Traceback (most recent call last):
ValueError: invalid int must be greater than 0

>>> bg.integer_validator("invalid int", 0)
Traceback (most recent call last):
ValueError: invalid int must be greater than 0
